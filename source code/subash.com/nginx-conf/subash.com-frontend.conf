#!/bin/bash

# Global variables
root_base_dir="/var/www/custom_site"
log_base_dir="/var/log/nginx/custom_site"
nginx_config_base_dir="/etc/nginx/sites-custom"
html_source="$HOME/website/index.html"

function print_separator {
    printf "\n%s\n" "--------------------------------------------------------------------------------"
}

function print_header {
    figlet -c -f slant "$1"
    print_separator
}

# Detection in Yellow color
function print_init {
    local message="$1"
    printf "\e[33m%s\e[0m\n" "$message"
}

# Intermediate in Blue color
function print_intermediate {
    local message="$1"
    printf "\e[34m%s\e[0m\n" "$message"
}

# Completion in Green color
function print_success {
    local message="$1"
    printf "\e[1m\e[32m%s\e[0m\n" "$message"
}

# Failures in Red color
function print_fail {
    local message="$1"
    printf "\e[1m\e[31m%s\e[0m\n" "$message"
}

detect_input_values() {
    print_separator
    print_header "INPUT DETECTION"
    print_separator

    # Check if all required arguments are provided
    if [ $# -ne 4 ]; then
        print_fail "Usage: $0 -site <server_name> -port <port>"
        exit 1
    fi

    # Parse command-line options
    while [[ $# -gt 0 ]]; do
        case "$1" in
            -site)
                server_name="$2"
                shift 2
                ;;
            -port)
                port="$2"
                shift 2
                ;;
            *)
                print_fail "Unknown option: $1"
                exit 1
                ;;
        esac
    done

    # Check if required options are provided
    if [ -z "$server_name" ] || [ -z "$port" ]; then
        print_fail "Usage: $0 -site <server_name> -port <port>"
        exit 1
    fi

    print_success "Input values detected: Server Name: $server_name, Port: $port"
}

create_directories() {
    print_separator
    print_header "DIRECTORY CREATION"
    print_separator
    # Create root directory for the server - frontend and backend
    if [ ! -d "$root_base_dir/$server_name/frontend" ]; then
        print_fail "Frontend Root directory is missing, please wait creating...."
        sudo mkdir -p "$root_base_dir/$server_name/frontend"
        sleep 2
        print_success "Created frontend root directory: $root_base_dir/$server_name/frontend"
    else
        print_init "Frontend root directory already exists: $root_base_dir/$server_name/frontend"
    fi

    if [ ! -d "$root_base_dir/$server_name/backend" ]; then
        print_fail "Backend Root directory is missing, please wait creating...."
        sudo mkdir -p "$root_base_dir/$server_name/backend" 
        sleep 2
        print_success "Created backend root directory: $root_base_dir/$server_name/backend"
    else
        print_init "Backend root directory already exists: $root_base_dir/$server_name/backend"
    fi

    print_separator
    # Create log directory for the server - frontend and backend
    if [ ! -d "$log_base_dir/$server_name/frontend" ]; then
        print_fail "Frontend Log directory is missing, please wait creating...."
        sleep 2
        sudo mkdir -p "$log_base_dir/$server_name/frontend"
        print_success "Created frontend log directory: $log_base_dir/$server_name/frontend"
    else
        print_init "Frontend log directory already exists: $log_base_dir/$server_name/frontend"
    fi

    if [ ! -d "$log_base_dir/$server_name/backend" ]; then
        print_fail "Backend Log directory is missing, please wait creating...."
        sudo mkdir -p "$log_base_dir/$server_name/backend"
        sleep 2
        print_success "Created backend log directory: $log_base_dir/$server_name/backend"
    else
        print_init "Backend log directory already exists: $log_base_dir/$server_name/backend"
    fi

    # Create host directory /etc/nginx/sites-custom/$server_name
    if [ ! -d "$nginx_config_base_dir/$server_name" ]; then
        print_fail "Nginx config directory is missing, please wait creating...."
        sudo mkdir -p "$nginx_config_base_dir/$server_name"
        sleep 2
        print_success "Created Nginx config directory: $nginx_config_base_dir/$server_name"
    else
        print_init "Nginx Config directory already exists: $nginx_config_base_dir/$server_name"
    fi

    print_separator
    print_intermediate "Allowing Read Privilege to log and root Directory"
    sudo chmod -R +755 $log_base_dir
    sudo chmod -R +755 $root_base_dir
    sudo chmod -R +755 $nginx_config_base_dir
}

generate_nginx_config() {
    print_separator
    print_header "NGINX CONFIGURATION"
    print_separator

    print_init "Generating Nginx configuration, please wait..."
    print_separator
    sleep 2
    # Generate nginx configuration
    config_dir="$HOME/nginx"
    site_config_dir="$config_dir/$server_name"
    config_file="$site_config_dir/$server_name.frontend.conf"

    config="server {
    listen $port;
    listen [::]:$port;

    server_name $server_name;

    root $root_base_dir/$server_name/frontend/;

    index index.html index.htm;

    location / {
        try_files \$uri \$uri/ =404;
    }

    location ~* \.(css|js|gif|jpe?g|png)$ {
        expires max;
        log_not_found off;
        access_log off;
    }

    error_page 404 /404.html;
    error_page 500 502 503 504 /50x.html;

    location = /50x.html {
        root /usr/share/nginx/html;
    }

    access_log $log_base_dir/$server_name/frontend/access.log;
    error_log $log_base_dir/$server_name/frontend/error.log;
}"

    # Create site config directory and save configuration
    mkdir -p $site_config_dir
    echo "$config" > "$config_file"
    print_success "Nginx configuration generated at: $config_file"
    sudo chmod -R +755 $site_config_dir
}

copy_html_site() {
    print_separator
    print_header "COPY HTML SITE"
    print_separator

    html_destination="$root_base_dir/$server_name/frontend/index.html"

    if [ -f "$html_source" ]; then
        print_init "Copying HTML site from $html_source to $html_destination"
        sudo cp "$html_source" "$html_destination"
        print_success "HTML site copied successfully"
    else
        print_fail "HTML source file not found at $html_source"
    fi
}

copy_restart_nginx_config() {
    print_separator
    print_header "COPY NGINX CONFIG"
    print_separator

    print_init "Copying nginx configuration to /etc/nginx/sites-custom/$server_name/$server_name.frontend.conf"
    sudo cp "$site_config_dir/$server_name.frontend.conf" "/etc/nginx/sites-custom/$server_name/$server_name.frontend.conf"
    print_success "Nginx configuration copied to /etc/nginx/sites-custom/$server_name/$server_name.frontend.conf"

    server_config_entry="include /etc/nginx/sites-custom/$server_name/*;"
    # Check if the inclusion entry already exists in nginx.conf
    if ! grep -qF "$server_config_entry" /etc/nginx/nginx.conf; then
        print_init "Initializing $nginx_config_base_dir/$server_name Directory to serve config"
        sudo sed -i "\\|include /etc/nginx/conf.d/[^ ]*.conf;|a\\        include /etc/nginx/sites-custom/$server_name/*;" /etc/nginx/nginx.conf

        # Check nginx configuration syntax
    else
        print_init "The inclusion entry already exists in /etc/nginx/nginx.conf. Skipping..."
    fi

# Testing and restarting services
    if sudo nginx -t; then
        print_init "Nginx configuration syntax test successful."
        # Restart nginx if the configuration test is successful
        print_init "Restarting nginx..."
        sudo systemctl restart nginx
        print_success "Nginx restarted successfully."
        # Reload nginx to apply the changes
        print_init "Reloading nginx configuration..."
        sudo nginx -s reload
        print_success "Nginx configuration reloaded successfully."
    else
        print_fail "Nginx configuration test failed. Please check the configuration."
    fi
}

display_details() {
    print_separator
    print_header "IMPORTANT DETAILS"
    print_separator

    local_ip=$(hostname -I | cut -d' ' -f1)

    
    echo -n "Website Global URL: "
    print_intermediate "http://$server_name:$port"
    echo -n "Website Local URL: "
    print_intermediate "http://$local_ip:$port"
    echo " "

    print_init "Frontend Directories"
    echo -n "Nginx Conf:    "
    print_success "/etc/nginx/sites-custom/$server_name/"
    echo -n "Root Hosting:  "
    print_success "$root_base_dir/$server_name/frontend/"
    echo -n "Logs Files:    " 
    print_success "$log_base_dir/$server_name/frontend/"

    echo ""
    print_init "Backend Directories"
    echo -n "Nginx Config:  "
    print_success "/etc/nginx/sites-custom/$server_name/"
    echo -n "Root Hosting:  "
    print_success "$root_base_dir/$server_name/backend/"
    echo -n "Logs Files:    "
    print_success "$log_base_dir/$server_name/backend/"
}


main() {
    detect_input_values "$@"
    create_directories
    generate_nginx_config
    copy_html_site
    copy_restart_nginx_config
    display_details
    unset server_name port root_base_dir log_base_dir nginx_config_base_dir config_dir site_config_dir config_file config
}

main "$@"